{"version":3,"sources":["components/Accordion/AccordionItem.js","components/App/App.js","serviceWorker.js","index.js"],"names":["AccordionItem","className","onClick","props","handleClick","index","this","header","isOpen","color","duration","height","body","Component","App","state","activeIndex","newIndex","setState","faqs","map","faq","question","answer","key","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"87EA8BeA,G,6KAxBH,IAAD,OACP,OACE,yBACAC,UAAW,gBACXC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,SAE/C,yBAAKJ,UAAU,UACb,4BAAKK,KAAKH,MAAMI,QAChB,kBAAC,IAAD,CACAN,UAAW,eAAiBK,KAAKH,MAAMK,OAAS,OAAS,IACzDC,MAAO,aAGT,kBAAC,IAAD,CACEC,SAAU,IACVC,OAAQL,KAAKH,MAAMK,OAAS,OAAS,EACrCP,UAAU,iBACV,2BAAIK,KAAKH,MAAMS,Y,GAlBGC,c,QCoCbC,G,kNAlCbC,MAAQ,CACNC,aAAc,G,EAGhBZ,YAAc,SAACC,GACb,IAAMY,EAAW,EAAKF,MAAMC,cAAgBX,GAAS,EAAIA,EAEzD,EAAKa,SAAS,CACZF,YAAaC,K,uDAIP,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,oBACb,2DAEDkB,EAAKC,KAAI,SAACC,EAAKhB,GAAN,OACR,kBAAC,EAAD,CACAE,OAAQc,EAAIC,SACZV,KAAMS,EAAIE,OACVf,OAAQ,EAAKO,MAAMC,cAAgBX,EACnCmB,IAAKnB,EACLA,MAAOA,EACPD,YAAe,EAAKA,YAAYqB,KAAK,c,GA5B/BZ,cCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd933109.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport AnimateHeight from 'react-animate-height';\nimport IosArrowDown from 'react-ionicons/lib/IosArrowDown';\nimport './AccordionItem.css';\n\nclass AccordionItem extends Component {\n  render() {\n    return (\n      <div\n      className={\"AccordionItem\"}\n      onClick={() => this.props.handleClick(this.props.index)}\n      >\n        <div className=\"header\">\n          <h2>{this.props.header}</h2>\n          <IosArrowDown \n          className={\"arrow-icon \" + (this.props.isOpen ? 'open' : '')}\n          color={\"#c7c7cd\"} />\n        </div>\n\n        <AnimateHeight \n          duration={400} \n          height={this.props.isOpen ? 'auto' : 0}\n          className=\"AnimateHeight\" >\n          <p>{this.props.body}</p>\n        </AnimateHeight>\n      </div>\n    )\n  }\n}\n\nexport default AccordionItem;","import React, {Component} from 'react';\nimport AccordionItem from '../../components/Accordion/AccordionItem'\nimport faqs from '../../data/faqs.json'\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    activeIndex: -1\n  }\n\n  handleClick = (index) => {\n    const newIndex = this.state.activeIndex === index ? -1 : index\n\n    this.setState({\n      activeIndex: newIndex\n    })\n  }\n  \n  render() {\n    return (      \n      <div className=\"App\">\n        <div className=\"faqs-container\">\n          <div className=\"header-container\">\n            <h1>Frequently Asked Questions</h1>\n          </div>\n          {faqs.map((faq, index) => (\n            <AccordionItem \n            header={faq.question} \n            body={faq.answer} \n            isOpen={this.state.activeIndex === index} \n            key={index}\n            index={index}\n            handleClick = {this.handleClick.bind(this)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}