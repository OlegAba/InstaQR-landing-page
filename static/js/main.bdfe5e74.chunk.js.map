{"version":3,"sources":["components/LandingPage.js","components/Faq/AccordionItem.js","components/Faq/Faq.js","components/ContactUs/ContactUs.js","components/App/App.js","serviceWorker.js","index.js"],"names":["LandingPage","Component","AccordionItem","body","this","props","map","paragraph","index","key","link","undefined","className","to","onClick","handleClick","header","isOpen","color","duration","height","Faq","newIndex","state","activeIndex","setState","bind","accordionItems","faqs","faq","question","answer","ContactUs","handleSubmit","event","preventDefault","sent","form","target","data","FormData","xhr","XMLHttpRequest","open","method","action","setRequestHeader","onreadystatechange","readyState","DONE","status","reset","alert","send","button","onSubmit","required","type","name","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y7HAYeA,E,uKARP,OACI,6BACI,iD,GAJUC,a,0CC4CXC,G,6KAvCH,IAAD,OACDC,EAAOC,KAAKC,MAAMF,KAAKG,KAAI,SAACC,EAAWC,GAAZ,OAC/B,uBAAGC,IAAKD,GAAQD,MAGZG,OAA0BC,GAAnBP,KAAKC,MAAMK,MACtB,yBAAKE,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,WAAWD,UAAU,QAA9B,eAGJ,OACE,yBAAKA,UAAU,iBACb,yBACEA,UAAU,SACVE,QAAS,kBAAM,EAAKT,MAAMU,YAAY,EAAKV,MAAMG,SAEjD,2BAAIJ,KAAKC,MAAMW,QACf,yBAAKJ,UAAU,kBACb,kBAAC,IAAD,CACEA,UAAW,eAAiBR,KAAKC,MAAMY,OAAS,OAAS,IACzDC,MAAO,cAKb,kBAAC,IAAD,CACEC,SAAU,IACVC,OAAQhB,KAAKC,MAAMY,OAAS,OAAS,GAErC,yBAAKL,UAAU,kBACZT,EACAO,S,GAhCeT,c,QCqCboB,E,kDArCb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAKRU,YAAc,SAACP,GACb,IAAMc,EAAW,EAAKC,MAAMC,cAAgBhB,GAAS,EAAIA,EACzD,EAAKiB,SAAS,CAAED,YAAaF,KAN7B,EAAKP,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKH,MAAQ,CAAEC,aAAc,GAHZ,E,qDAWT,IAAD,OACDG,EAAiBC,EAAKtB,KAAI,SAACuB,EAAKrB,GAAN,OAC9B,kBAAC,EAAD,CACEQ,OAAQa,EAAIC,SACZ3B,KAAM0B,EAAIE,OACVrB,KAAMmB,EAAInB,KACVO,OAAQ,EAAKM,MAAMC,cAAgBhB,EACnCC,IAAKD,EACLA,MAAOA,EACPO,YAAe,EAAKA,iBAIxB,OACE,yBAAKH,UAAU,OACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,2DAEDe,Q,GAhCO1B,aCwEH+B,G,wDAvEb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAKR4B,aAAe,SAACC,GAEd,GADAA,EAAMC,kBACF,EAAKZ,MAAMa,KAAf,CAEA,IAAMC,EAAOH,EAAMI,OACbC,EAAO,IAAIC,SAASH,GACpBI,EAAM,IAAIC,eAEhBD,EAAIE,KAAKN,EAAKO,OAAQP,EAAKQ,QAC3BJ,EAAIK,iBAAiB,SAAU,oBAC/BL,EAAIM,mBAAqB,WACnBN,EAAIO,aAAeN,eAAeO,OACnB,MAAfR,EAAIS,QACNb,EAAKc,QACL,EAAK1B,SAAS,CAAEW,MAAM,KAEtBgB,MAAM,+DAIVX,EAAIY,KAAKd,KAxBT,EAAKN,aAAe,EAAKA,aAAaP,KAAlB,gBACpB,EAAKH,MAAQ,CAAEa,MAAM,GAHJ,E,qDA8BjB,IAAMkB,EACJ,4BAAQ1C,UAAaR,KAAKmB,MAAMa,KAAO,UAAY,IAChDhC,KAAKmB,MAAMa,KAAO,UAAY,UAGnC,OACE,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,0CACA,kIAGF,yBAAKA,UAAU,kBACb,0BACEA,UAAU,kBACV2C,SAAUnD,KAAK6B,aACfY,OAAO,gCACPD,OAAO,QAEP,yBAAKY,UAAQ,EAAC5C,UAAU,mBACtB,wCACA,2BAAO4C,UAAQ,EAACC,KAAK,OAAOC,KAAK,UAEnC,yBAAKF,UAAQ,EAAC5C,UAAU,mBACtB,yCACA,2BAAO6C,KAAK,QAAQC,KAAK,WAE3B,yBAAKF,UAAQ,EAAC5C,UAAU,mBACtB,2CACA,8BAAU6C,KAAK,OAAOC,KAAK,aAE5BJ,U,GAhESrD,cCgBT0D,G,6KAVX,OACE,yBAAK/C,UAAU,OACb,kBAAC,IAAD,CAAOgD,OAAK,EAACC,KAAK,IAAIC,UAAW9D,IACjC,kBAAC,IAAD,CAAO4D,OAAK,EAACC,KAAK,OAAOC,UAAWzC,IACpC,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,WAAWC,UAAW9B,S,GAN9B/B,cCKE8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bdfe5e74.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LandingPage extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Landing Page</h1>\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport AnimateHeight from 'react-animate-height';\nimport IosArrowDown from 'react-ionicons/lib/IosArrowDown';\nimport './AccordionItem.css';\n\nclass AccordionItem extends Component {\n  render() {\n    const body = this.props.body.map((paragraph, index) => (\n      <p key={index}>{paragraph}</p>\n    ));\n\n    const link = this.props.link != undefined &&\n      <div className=\"link-container\">\n        <Link to=\"/contact\" className=\"link\">Contact Us</Link>\n      </div>\n\n    return (\n      <div className=\"AccordionItem\">\n        <div \n          className=\"header\" \n          onClick={() => this.props.handleClick(this.props.index)}\n        >\n          <p>{this.props.header}</p>\n          <div className=\"icon-container\">\n            <IosArrowDown \n              className={\"arrow-icon \" + (this.props.isOpen ? 'open' : '')}\n              color={\"#c7c7cd\"} \n            />\n          </div>\n        </div>\n\n        <AnimateHeight \n          duration={400} \n          height={this.props.isOpen ? 'auto' : 0} \n        >\n          <div className=\"body-container\">\n            {body}\n            {link}\n          </div>\n        </AnimateHeight>\n      </div>\n    )\n  }\n}\n\nexport default AccordionItem;","import React, { Component } from 'react';\nimport AccordionItem from './AccordionItem'\nimport faqs from '../../data/faqs.json'\n\nclass Faq extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { activeIndex: -1 }\n  }\n\n  handleClick = (index) => {\n    const newIndex = this.state.activeIndex === index ? -1 : index\n    this.setState({ activeIndex: newIndex })\n  }\n\n  render() {\n    const accordionItems = faqs.map((faq, index) => (\n      <AccordionItem \n        header={faq.question} \n        body={faq.answer}\n        link={faq.link}\n        isOpen={this.state.activeIndex === index} \n        key={index}\n        index={index}\n        handleClick = {this.handleClick}\n      />\n    ));\n\n    return (\n      <div className=\"Faq\">\n        <div className=\"max-width-container\">\n          <div className=\"header-container\">\n            <h1>Frequently Asked Questions</h1>\n          </div>\n          {accordionItems}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Faq;","import React, { Component } from 'react';\nimport './ContactUs.css';\n\nclass ContactUs extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { sent: false }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.sent) { return }\n\n    const form = event.target;\n    const data = new FormData(form);\n    const xhr = new XMLHttpRequest();\n\n    xhr.open(form.method, form.action);\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\n      if (xhr.status === 200) {\n        form.reset();\n        this.setState({ sent: true });\n      } else {\n        alert(\"There was an error sending your message. Please try again\");\n      }\n    };\n\n    xhr.send(data);\n  }\n\n  render() {\n    const button = \n      <button className = {this.state.sent ? \"success\" : \"\"}>\n        {this.state.sent ? \"Thanks!\" : \"Submit\"}\n      </button>\n\n    return (\n      <div className=\"ContactUs\">\n        <div className=\"max-width-container\">\n          <div className=\"header-container\">\n            <h1>Contact Us</h1>\n            <p>Got a question? We'd love to hear from you. Submit the form and we'll response as soon as possible</p>\n          </div>\n\n          <div className=\"form-container\">\n            <form\n              className=\"contact-us-form\"\n              onSubmit={this.handleSubmit} \n              action=\"https://formspree.io/mqkyanrj\" \n              method=\"POST\"\n            >\n              <div required className=\"input-container\">\n                <label>Name </label>\n                <input required type=\"text\" name=\"name\" />\n              </div>\n              <div required className=\"input-container\">\n                <label>Email </label>\n                <input type=\"email\" name=\"email\" />\n              </div>\n              <div required className=\"input-container\">\n                <label>Message </label>\n                <textarea type=\"text\" name=\"message\" />\n              </div>\n              {button}\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactUs;","import React, {Component} from 'react';\nimport { Route } from 'react-router-dom';\nimport LandingPage from '../LandingPage';\nimport Faq from '../Faq/Faq';\nimport ContactUs from '../ContactUs/ContactUs';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (      \n      <div className=\"App\">\n        <Route exact path=\"/\" component={LandingPage} />\n        <Route exact path=\"/faq\" component={Faq} />\n        <Route exact path=\"/contact\" component={ContactUs} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}